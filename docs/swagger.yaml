basePath: /
host: localhost:8081
info:
  contact:
    email: tommychu2256@gmail.com
    name: Tommy Chu
  description: This is a sample of a REST API
  license: {}
  title: Library Example API
  version: "1.0"
paths:
  /books:
    get:
      description: find all books in the database and serve it
      produces:
      - application/json
      responses:
        "200":
          description: Read
          schema:
            type: string
        "400":
          description: input
          schema:
            type: string
        "500":
          description: JSON unmarshal
          schema:
            type: string
      summary: return all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: validate a new book and insert it into the database
      parameters:
      - description: Stock Keeping Unit
        in: body
        name: sku
        required: true
        schema:
          type: string
      - description: The name of the book
        in: body
        name: name
        required: true
        schema:
          type: string
      - description: The author's name
        in: body
        name: author
        required: true
        schema:
          type: string
      - description: The book's description
        in: body
        name: description
        schema:
          type: string
      - default: "0"
        description: The book's value
        in: body
        name: price
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Created
          schema:
            type: string
        "400":
          description: input
          schema:
            type: string
        "500":
          description: JSON unmarshal
          schema:
            type: string
      summary: create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: find a book and delete it
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted
          schema:
            type: string
        "400":
          description: input
          schema:
            type: string
        "500":
          description: JSON unmarshal
          schema:
            type: string
      summary: remove a book
      tags:
      - books
    get:
      description: find a book by id and serve it
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Read
          schema:
            type: string
        "400":
          description: input
          schema:
            type: string
        "500":
          description: JSON unmarshal
          schema:
            type: string
      summary: return a book
      tags:
      - books
    put:
      consumes:
      - application/json
      description: find a book and update it with new values
      parameters:
      - description: Stock Keeping Unit
        in: body
        name: sku
        schema:
          type: string
      - description: The name of the book
        in: body
        name: name
        schema:
          type: string
      - description: The author's name
        in: body
        name: author
        schema:
          type: string
      - description: The book's description
        in: body
        name: description
        schema:
          type: string
      - description: The book's value
        in: body
        name: price
        schema:
          type: string
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Updated
          schema:
            type: string
        "400":
          description: input
          schema:
            type: string
        "500":
          description: JSON unmarshal
          schema:
            type: string
      summary: update a book
      tags:
      - books
schemes:
- http
swagger: "2.0"
